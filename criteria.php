Базовые критерии

Б1. Выполнена HTML-разметка всех страниц и всех элементов на страницах.

Критерий требует, чтобы все страницы личного макета и все элементы на этих страницах были свёрстаны.

Б2. К страницам подключён один стилевой файл (с учётом normalize.css к каждой странице могут быть подключены два файла).

Критерий говорит о том, что все стили страниц должны находиться в едином файле. Исключением является файл normalize.css. Он может быть подключён отдельно, перед основным стилевым файлом.

Верно: к документу подключаются два файла — normalize.css и основной стилевой файл.

<head>
  <link rel="stylesheet" href="css/normalize.css">
  <link rel="stylesheet" href="css/style.css">
</head>

Неверно: к документу подключается несколько стилевых файлов. Один из них содержит общие стили, второй стили конкретной страницы.

<head>
  <link rel="stylesheet" href="css/normalize.css">
  <link rel="stylesheet" href="css/all.css">
  <link rel="stylesheet" href="css/main-page.css">
</head>

Б3. Стилевой файл подключён внутри <head>.

Подключение стилевых файлов должно производиться внутри <head>.

Верно: стилевой файл подключён в секции <head>.

<!DOCTYPE html>
<html>
  <head>
    ...
    <link rel="stylesheet" href="css/style.css">
  </head>
  <body>
    ...
  </body>
</html>

Неверно: стилевой файл подключён в секции <body>

<!DOCTYPE html>
<html>
  <head>
    ...
  </head>
  <body>
    <link rel="stylesheet" href="css/style.css">
    ...
  </body>
</html>


Б4. Грубые ошибки в разметке отсутствуют.
Грубые ошибки:

  	1  Ссылки сделаны не тегом <a>, а другими тегами.

    Для создания определённых элементов на странице необходимо использовать соответствующие теги. Для примера рассмотрим блок с новостями на главной странице макета Барбершоп. В этом случае, ссылка на все новости хоть и выглядит как кнопка, но на самом деле является ссылкой.

    2	Использование строчных элементов для создания крупных (сеточных) блоков.

Использование строчных тегов для построения сетки недопустимо. Для построения сетки должны использоваться блочные элементы.

Верно: сетка построена с использованием блочных элементов.

<div class="features">
  <div class="features-item">
    ...
  </div>
  <div class="features-item">
    ...
  </div>
  <div class="features-item">
    ...
  </div>
</div>

   Неверно: сетка построена с использованием строчных элементов, которые впоследствии будут изменены на блочные средствами CSS.

<div class="features">
  <span class="features-item">
    ...
  </span>
  <span class="features-item">
    ...
  </span>
  <span class="features-item">
    ...
  </span>
</div>

    3	Абзацы сделаны не тегами <p>, а <br><br>.

Если в макете текст разделен на несколько абзацев, то в разметке каждый такой абзац должен быть обёрнут в соответствующий тег. Использовать для разбиения на абзацы <br> недопустимо.

	4	Негрубые ошибки:

    Отсутствие семантических тегов <header>, <footer>, <section> и других;

    Критерий говорит о том, что отсутствие семантических тегов не является ошибкой. Оба приведённых ниже примера являются допустимыми.

    Разметка выполнена с использованием семантических тегов.

      <header class="main-header">
        <div class="container">
          <nav class="main-navigation">
            ...
          </nav>
        </div>
      </header>


    Разметка выполнена без использования семантических тегов.

      <div class="main-header">
        <div class="container">
          <div class="main-navigation">
            ...
          </div>
        </div>
      </div>


   5	 Ошибки касающиеся SEO-оптимизации.


Стилизация

Б6. Вся собственная стилизация выполнена в одном стилевом файле.

Все стили всех страниц должны находиться в едином файле. Нет необходимости разносить различающиеся файлы разных страниц в отдельные файлы и подключать их по необходимости.

Исключением могут являться файлы с подключением шрифтов, если они грузятся со стороннего сервиса, например, Google Fonts. В таком случае эти файлы могут идти отдельно и не являться частью основного файла стилей

Б7. Раскладка блоков на странице сделана не с помощью таблиц или позиционирования.

Для построения основной сетки страницы необходимо использовать float или inline-block элементы. Допускается использование и продвинутых техник (CSS-таблицы, флексбоксы), если студент в них разбирается и хочет попрактиковаться в вёрстке с использованием этих свойств.

Использование тега <table> и блоков с абсолютным позиционированием недопустимо. <table> является устаревшим методом построения сеток, а элементы с абсолютным позиционирование вырываются из общего потока. Допускается использование этих методов для создания декоративных элементов и модальных окон.

Использовать табличную раскладку блоков с применением свойств display:table, display:table-row, display:table-cell и так далее не запрещено.

Верно: основная сетка сделана с использованием float элементов.

<div class="features clearfix">
  <div class="features-item">
    ...
  </div>
  <div class="features-item">
    ...
  </div>
  <div class="features-item">
    ...
  </div>
</div>

.features-item {
  float: left;
  width: 300px;
  padding: 0 10px;
}

Неверно: основная сетка сделана с использованием таблиц.

<table class="features">
  <tr>
    <td class="features-item">
      ...
    </td>
    <td class="features-item">
      ...
    </td>
    <td class="features-item">
      ...
    </td>
  </tr>
</table>

Неверно: основная сетка сделана с использованием абсолютного позиционирования.

<div class="features">
  <div class="features-item features-1">
    ...
  </div>
  <div class="features-item features-2">
    ...
  </div>
  <div class="features-item features-3">
    ...
  </div>
</div>

.features {
  position: relative;
}
.features-item {
  position: absolute;
  top: 0;

  width: 300px;
}
.features-1 {
  left: 0;
}
.features-item {
  left: 300px;
}
.features-item {
  right: 0;
}


Б8. В CSS отсутствует !important. Допускается использование !important при обосновании его необходимости в комментарии.

В большинстве случаев, необходимость использования !important в CSS возникает из-за неправильного обращения к элементам страницы через каскад. Однако, в редких случаях, без использования !important не обойтись. Если без использования !important не обойтись или использование осознанно, то это не ошибка.

Подробнее в статье: http://meiert.com/en/blog/20150310/important/.

Неверно: в коде CSS используется !important.

.text-page p {
  font-size: 14px !important;
  line-height: 20px !important;
}


Б9. Подключены правильные шрифты, их размеры, цвета и толщина соответствуют размерам, цветам и толщине в макетах и техническом задании.

Необходимо, чтобы в личном проекте использовались именно те шрифты, которые указаны в макете. При этом их размеры, цвета, и жирность должны соответствовать размерам, цветам и толщине в макетах и техническом задании.

Б10. Указаны альтернативные варианты шрифта и тип семейства в конце перечисления font-family.

Альтернативный веб-безопасный шрифт и тип семейства необходимо указывать для того, чтобы в случае отсутствия основного шрифта изменения внешнего вида шрифтов на странице были минимальны.

Порядок шрифтов следующий:

    основной шрифт;
    веб-безопасный;
    тип шрифта.

Список веб-безопасных шрифтов можно посмотреть здесь: http://www.cssfontstack.com/.

Важно: альтернативный веб-безопасный шрифт должен быть такого же типа, что и основной, но подбирать максимально похожий шрифт не нужно.

Верно: указан альтернативный веб-безопасный шрифт и его тип семейства.

body {
  font-family: "PT Sans Narrow", "Arial", sans-serif;
}

/* Кому-то нравится Arial, кому-то Tahoma */
body {
  font-family: "PT Sans Narrow", "Tahoma", sans-serif;
}

Неверно: указан только основной шрифт.

body {
  font-family: "PT Sans Narrow";
}

Неверно: указан только основной шрифт и тип семейства, альтернативный веб-безопасный шрифт отсутствует.

body {
  font-family: "PT Sans Narrow", sans-serif;
}

Неверно:Times New Roman — шрифт с засечками, а основной шрифт — без засечек.

body {
  font-family: "PT Sans Narrow", "Times New Roman", sans-serif;
}


Б11. При наполнении контентом (как в макете) элементы каждой страницы соответствуют макету.

Допускаются:

    Различия в 5 пикселей по высоте (при расстояниях более 30 пикселей) и 2 пикселя по ширине;
    Отсутствие стилизации кастомных элементов форм;
        Разрешается оставлять не стилизованными только элементы форм checkbox, radio и select.

        Для стилизации select использовать JS-библиотеки запрещается. Подробнее: http://habrahabr.ru/company/htmlacademy/blog/257743/.    Для стилизации select использовать JS-библиотеки запрещается. Подробнее: http://habrahabr.ru/company/htmlacademy/blog/257743/.

	Различия в отображении шрифтов, связанные со сглаживанием на различных платформах.

Б12. Вёрстка идентично отображается в последних версиях браузеров Chrome, Opera, Firefox, Safari, а также в Internet Explorer 10+.

При проверке этого критерия, необходимо смотреть на размеры и расположение блоков, внешнее сходство с макетом. Проверять работу анимации, если такая имеется. Допускаются небольшие отличия в отображениях шрифтов.

Б13. Сайт нормально смотрится на минимальном для макета разрешении.

    Нёрдс — 880px (900px с учётом padding);
    Техномарт — 940px (960px с учётом padding);
    Седона — 768px (для фиксированной можно использовать либо версию 768px, либо 1200px).
    Глейси — 900px (для фиксированной можно использовать либо версию 900px, либо 1200px).

padding по краям контейнера указывается для того, чтобы контент не прижимался к краям экрана на минимальном разрешении. При большем размере экрана макет должен оставаться по центру и не иметь горизонтального скролла. На разрешениях экрана меньше ширины контейнера вёрстка не должна менять свою структуру.

Критерий рассматривает поведение страницы при размере экрана большим или меньшим, чем ширина основного контейнера страницы.

Б14. В корне документа имеются папки css, img, js или аналогичные. Главная страница имеет название index.html. В названиях и расширениях файлов нет заглавных букв и пробелов, использованы только латинские символы.

Б15. Единообразное написание и форматирование кода в HTML, CSS и JavaScript.

Критерий рассматривает единообразие в написании кода:

    если используются двойные кавычки, то они используются везде;
    если размер отступа в два пробела, то таким он должен быть везде;
    если для отступов используются табы или пробелы, то для всех отступов должны быть либо табы, либо пробелы;
    названия классов должны быть оформлены единообразно.

Важно: этот критерий учитывает именно единообразие, а не стиль написания и форматирования кода.

Верно: единообразное написание кода разметки. Везде используется одинаковое количество пробелов, одинаковые скобки, единообразное написание названий классов.

<header class="main-header">
  <div class="container clearfix">
    <nav class="main-navigation">
      <ul>
        <li class="active">
          <a href="index.html">Главная</a>
        </li>
        <li>
          <a href="#">Информация</a>
        </li>
        <li>
          <a href="#">Новости</a>
        </li>
        <li>
          <a href="text.html">Прайс-лист</a>
        </li>
        <li>
          <a href="catalog.html">Магазин</a>
        </li>
        <li>
          <a href="#">Контакты</a>
        </li>
      </ul>
    </nav>
    <div class="log-in">
      <a href="#" class="log-in-button">Вход</a>
    </div>
  </div>
</header>

Верно: единообразное написание кода стилей. Используется одинаковое количество пробелов, одинаковое положение скобок, единообразная последовательность написания свойств.

.btn {
  width: 100%;
  padding: 10px 15px;

  font-size: 14px;
  line-height: 24px;
  text-align: center;
  color: #ffffff;

  cursor: pointer;
}

.main-navigation a {
  display: block;
  padding: 30px 0 23px;

  font-size: 16px;
  line-height: 20px;
  text-decoration: none;
  color: #ffffff;

  border-bottom: 4px solid transparent;
}

Неверно: используются разные кавычки и разное количество пробелов в табуляции. В именах классов нет единообразия.

<header class="main-header">
  <div class="container clearfix">
      <nav class='mainNavigation'>
        <ul><li class="active">
          <a href="index.html">Главная</a>
        </li>
        <li>
            <a href="#">Информация</a>
        </li>
        <li><a href=''>Новости</a></li>
        <li>
          <a href="text.html">Прайс-лист</a>
        </li>
        <li>
          <a href="catalog.html">Магазин</a>
        </li>
        <li>
            <a href="#">Контакты</a>
        </li>
      </ul>
    </nav>
    <div class='logIn'>
          <a href="#" class="log-in-button">Вход</a>
    </div>
  </div>
</header>

Неверно: используется разное количество пробелов в табуляции, скобки в разных местах.

.btn{
width: 100%;
  font-size: 14px;
line-height: 24px;
padding: 10px 15px;

cursor: pointer;
text-align: center;
color: #fff;
border: none;
  outline: none;
background: #0000000;
  text-decoration: none;
  text-transform: uppercase}

.main-navigation a
{
  display: block;
padding: 30px 0 23px;
  font-size: 16px;
  line-height: 20px;
  text-decoration: none;

color: #ffffff;
  border-bottom: 4px solid transparent;
}


Б16. Выбран подходящий формат изображений.

Например:

    JPEG для фотографий;
    PNG или SVG для всех прочих.

ДОПОЛНИТЕЛЬНЫЕ критерии

Д1. У всех изображений в теге <img> прописан размер.

Должны быть указаны действительные размеры картинок без указания единиц измерения.

Верно: размеры картинке заданы.

<div class="logo-area">
  <img src="img/logo-big.png" alt="Барбершоп" width="300" height="150">
</div>

Неверно: размеры картинке заданы с размерностью в px.

<div class="logo-area">
  <img src="img/logo-big.png" alt="Барбершоп" width="300px" height="150">
</div>

Неверно: размеры картинке не заданы.

<div class="logo-area">
  <img src="img/logo-big.png" alt="Барбершоп">
</div>

Д2. Использовано минимально возможное количество HTML-элементов (нет лишних элементов).

В разметке должно быть использовано минимально возможное количество элементов. Не должно быть лишних обёрток и блоков, которые используются для оформления и могут быть заменены на псевдоэлементы.

Верно: не используется лишняя обёртка, а для декоративного элемента нет дополнительного блока в разметке.

<div class="features clearfix">
  <div class="features-item">
    <h2>Быстро</h2>
    <p>Мы делаем свою работу быстро!</p>
  </div>
  ...
</div>

Неверно: используется лишняя обёртка, которую можно сократить, а для декоративного элемента использован тег <span>, который можно заменить на псевдоэлемент.

<div class="features">
  <div class="clearfix">
    <div class="features-item">
      <h2>Быстро</h2>
      <span class="triangle"></span>
      <p>Мы делаем свою работу быстро!</p>
    </div>
  </div>
  ...
</div>

Д3. Все скрипты подключены непосредственно перед </body>.

Подключение скриптов в самом низу страницы необходимо для того, чтобы загружающийся скрипт не блокировал содержимое страницы.

Верно: скрипт подключается перед закрывающим тегом <body>.

<!DOCTYPE html>
<html>
  <head>
    ...
  </head>
  <body>
    ...
    <script src="js/script.js"></script>
  </body>
</html>

Неверно: скрипт подключается в секции <head>.

<!DOCTYPE html>
<html>
  <head>
    ...
    <script src="js/script.js"></script>
  </head>
  <body>
    ...
  </body>
</html>

Д4. Названия полей форм привязаны к своим полям с помощью <label>.

Для улучшения взаимодействия пользователя с элементами форм должна быть реализована активация поля при нажатии на его описание. Для этого необходимо связывать элемент формы с его описанием, используя тег </label> и идентификаторы.

Верно: элемент формы radio связан с его описанием через идентификатор.

<input type="radio" id="spb">
<label for="spb">Санкт-Петербург</label>

Верно: элемент формы radio и подпись обёрнуты в <label>

<label>
  <input type="radio"> Санкт-Петербург
</label>

Неверно: описание никак не связано с элементом формы.

<input type="radio" id="spb"> Санкт-Петербург

Д5. Использован normalize.css.

Для выполнения этого критерия необходимо, чтобы был использован файл normalize.css.

Верно: файл normalize.css подключается отдельным файлом перед основным файлом стилей.

<link rel="stylesheet" href="css/normalize.css">
<link rel="stylesheet" href="css/style.css">

Неверно: файл сброса стилей не подключается.

<link rel="stylesheet" href="css/style.css">

По желанию содержимое normalize.css можно включить в начало основного стилевого файла.

Д6. Для стилизации не использованы #id.

Для стилизации объектов лучше использовать селекторы по классам или тегам. Использовать id для стилизации недопустимо.

Важно: использовать атрибут id в HTML-разметке можно и нужно. Например, для привязки полей к подписям в формах.

Верно: стилизация элементов через классы.

.feedback {}
.feedback p {}
.main-header {}

Неверно: стилизация элементов и каскад строится через идентификаторы.

#feedback {}
#feedback p {}
#main-header {}

Д7. Нет вложенности селекторов больше двух.

Длинные цепочки вложенных селекторов усложняют код и его поддержку. Хорошим подходом считается использовать вложенность двух или трёх уровней. Селекторы с вложенностью не более двух — это наш маленький, но важный каприз.

Псевдоэлементы или псевдоклассы не увеличивают уровень вложенности.

Важно: допускается использовать селекторы с вложенностью больше двух при оживлении слайдеров на чистом CSS.

Верно: максимальная глубина селекторов не превышает два элемента.

.catalog {}
.catalog-item img {}
.catalog-item .item-description {}
.catalog-item h3 {}
.catalog-item:nth-child(odd):hover .item-description::after {} /* это тоже 2 уровня вложенности */

Неверно: глубина селекторов больше двух, но при этом их можно сократить.

.catalog{}
.catalog .catalog-item img {}
.catalog .catalog-item .item-description {}
.catalog .catalog-item h3 {}


Д8. Явно указано подходящее vertical-align для потоковых блоков с display: inline-block.

По умолчанию элементы inline-block имеют выравнивание baseline, которое может приводить к нежелательному поведению элементов, например, когда внутри них разное количество строк.

Поэтому нужно явно и осознанно задавать выравнивание таким элементам.

Потоковыми элементами стоит считать те элементы, которые образуют крупные сеточные блоки. При переполнении таких блоков, можно заметить ошибку, при которой блоки будут выравниваться по baseline, а не по верхнему краю, как это должно быть. В таком случае задавать блокам vertical-align необходимо. Потоковыми элементами могут считаться колонки, карточки товаров, кнопки.

В случае, если inline-block используется для создания элементов, для которых значение по умолчанию приемлимо, например элементы имеют фиксированную высоту, вертикальное выравнивание можно не задавать.

Д9. Для CSS-свойств с префиксом указан его вариант без префикса, и это указание идёт последним.

Вендорные префиксы обеспечивают кроссбраузерную работу некоторых свойств CSS. Какие именно свойства необходимо использовать с префиксами, можно посмотреть здесь.

Свойство без префиксов обязательно должно идти после всех свойств с префиксами.

Верно:

.class {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

Неверно:

.class {
          box-sizing: border-box;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
}

Д10. Для блока, у которого есть фоновое изображение, прописан фоновый цвет, который соответствует преобладающему цвету изображения (пока изображение не загружено, страница выглядит похоже на макет).

Такой метод использует для перестраховки, как и в случае со шрифтом. Только в этом случае, если фоновое изображение не загрузится, на заднем фоне останется преобладающий цвет.

Д11. Все состояния элементов (смотрите styleguide.psd) прописаны в стилевом файле.

В соответствии с файлом styleguide.psd, который присутствует в каждом проекте, все указанные в нём элементы должны иметь соответствующие эффекты при наведении и нажатии. Должны присутствовать все активные состояния, а для чекбоксов и радио кнопок прописаны состояния disabled.

Д12. Файл стилей представлен в двух вариантах: с форматированием и минимизированный, к странице подключён минимизированный.

Д13. JavaScript-файл представлен в двух вариантах: с форматированием и минимизированный, к странице подключён минимизированный.

Д17. Вёрстка проходит тест на переполнение контентом.

    Не ломается при добавлении в элементы большего количества текста;
    Не ломается при использовании картинок с неподходящими размерами;
    Не ломается при изменении количества потоковых блоков;
   Текст не выпадает из блоков, нижерасположенные блоки не скрываются, смещение блоков в потоке сохраняет логику потока (не приводит к нарушению сетки).

Д18. Критический функционал сайта работоспособен без JavaScript (использовано прогрессивное улучшение).

Например:

    Все формы являются работоспособными без JavaScript;
    Элементы, вызывающие появление попапов, являются ссылками, ведущими на отдельные страницы;

    Для выполнения этого критерия достаточно указать адрес на страницу, на которую будет происходить переход в случае неработоспособности JavaScript. При этом верстать саму страницу необязательно. Пример:

    <a class="btn btn-open-form" href="form.html">Открыть форму</a>


    Интерактивная карта без JavaScript показывает статичную картинку с картой.

Д19. Отсутствует транслит в названиях классов, атрибутах и так далее.

Для написания классов необходимо использовать английские слова и термины.

Верно: используются только английские слова.

.login-button {}
.container {}
.footer {}

Неверно: транслит с русского языка.

.knopka-vxoda {}
.kontainer {}
.podval {}

Д22. Страницы должны ссылаться друг на друга из главного меню.

При этом активный пункт меню должен быть подсвечен в соответствии со стайлгайдом. Также на всех внутренних страницах должна быть ссылка на логотипе, ведущая на главную страницу. Однако на главной странице логотип должен быть без ссылки.

